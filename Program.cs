// Задача 62. Напишите программу, которая заполнит спирально массив 4 на 4.
// Например, на выходе получается вот такой массив:
// 01 02 03 04
// 12 13 14 05
// 11 16 15 06
// 10 09 08 07
Console.Clear();
int[,] massiv = new int[7, 7];
int count = 1;
void FillRight(int[,] fill, int x, int y, int step)     //Метод который заполняет массив слева направо. Фиксируется строка, заполняются столбцы в положительную сторону.
                                                        //Принимает x и у и step. х - позиция строк, у - позиция столбцов,
                                                        //step - количество ячеек которые нужно заполнить
{
    x--;
    //Нужно чтобы мы смогли вводить координаты строк, столбцов, при вызове метода начиная с 1 а не с 0 и программа считала правильно при этом
    y--;
    //Нужно чтобы мы смогли вводить координаты строк, столбцов, при вызове метода начиная с 1 а не с 0 и программа считала правильно при этом
    for (int i = 0; i < step && y < fill.GetLength(1); y++, i++, count++) //Выполняется если step>0 и позиция столбца(y)<длины столбцов массива
    {
        fill[x, y] = count; //Заполняем здесь числом из счетчика count
    }
}
void FillLeft(int[,] fill, int x, int y, int step)      //Метод который заполняет массив справа налево. Фиксируется строка, заполняются столбцы в отрицательную сторону.
                                                        //Принимает x и у и step. х - позиция строк, у - позиция столбцов,
                                                        //step - количество ячеек которые нужно заполнит
{
    x--;
    //Нужно чтобы мы смогли вводить координаты строк, столбцов, при вызове метода начиная с 1 а не с 0 и программа считала правильно при этом
    y--;
    //Нужно чтобы мы смогли вводить координаты строк, столбцов, при вызове метода начиная с 1 а не с 0 и программа считала правильно при этом
    for (int i = 0; i < step && y < fill.GetLength(1); y--, i++, count++) //Выполняется если step больше 0 и позиция столбца(y) меньше длины столбцов массива
    {
        fill[x, y] = count; //Заполняем здесь числом из счетчика count
    }

}
void FillDown(int[,] fill, int x, int y, int step)      //Метод который заполняет массив сверху вниз. Фиксируется столбец, заполняются строки в положительную сторону.
                                                        //Принимает x и у и step. х - позиция строк, у - позиция столбцов,
                                                        //step - количество ячеек которые нужно заполнить
{
    x--;
    //Нужно чтобы мы смогли вводить координаты строк, столбцов, при вызове метода начиная с 1 а не с 0 и программа считала правильно при этом
    y--;
    //Нужно чтобы мы смогли вводить координаты строк, столбцов, при вызове метода начиная с 1 а не с 0 и программа считала правильно при этом
    for (int i = 0; i < step && x < fill.GetLength(0); x++, i++, count++) //Выполняется если step больше 0 и позиция строки(x) меньше длины строк массива
    {
        fill[x, y] = count; //Заполняем здесь числом из счетчика count
    }
}
void FillUp(int[,] fill, int x, int y, int step)        //Метод который заполняет массив снизу вверх. Фиксируется столбец, заполняются строки в отрицательную сторону.
                                                        //Принимает x и у и step. х - позиция строк, у - позиция столбцов,
                                                        //step - количество ячеек которые нужно заполнить
{
    x--;
    //Нужно чтобы мы смогли вводить координаты строк, столбцов, при вызове метода начиная с 1 а не с 0 и программа считала правильно при этом
    y--;
    //Нужно чтобы мы смогли вводить координаты строк, столбцов, при вызове метода начиная с 1 а не с 0 и программа считала правильно при этом
    for (int i = 0; i < step && x < fill.GetLength(0); x--, i++, count++) //Выполняется если step больше 0 и позиция строки(x) меньше длины строк массива
    {
        fill[x, y] = count; //Заполняем здесь числом из счетчика count
    }
}
void PrintMassiv(int[,] print)
{
    for (int i = 0; i < print.GetLength(0); i++)
    {
        for (int j = 0; j < print.GetLength(1); j++)
        {
            if (print[i, j] < 10)
            {
                Console.Write($"{0}{print[i, j]} ");
            }
            if (print[i, j] >= 10)
            {
                Console.Write($"{print[i, j]} ");
            }
        }
        Console.WriteLine();
    }
    Console.WriteLine();
}
FillRight(massiv, 1, 1, 7);
FillDown(massiv, 1, 7, 7);
FillLeft(massiv, 7, 7, 7);
FillUp(massiv, 7, 1, 6);
FillRight(massiv, 2, 1, 6);
FillDown(massiv, 2, 6, 4);
FillLeft(massiv, 6, 6, 5);
FillUp(massiv, 5, 2, 3);
FillRight(massiv, 3, 2, 4);
FillDown(massiv, 4, 5, 2);
FillLeft(massiv, 5, 4, 2);
FillUp(massiv, 4, 3, 1);
FillRight(massiv, 4, 4, 1);
PrintMassiv(massiv);

// Вариант решения через рекурсию
// Console.Clear();
// int[,] massiv = new int[,] {{1,1,1,1,1,1},
//                             {1,0,0,0,0,1},
//                             {1,0,0,0,0,1},
//                             {1,0,0,0,0,1},
//                             {1,0,0,0,0,1},
//                             {1,1,1,1,1,1},};
// int x = 0;
// void Fill(int row, int col)
// {
// // Блок с x==12 нужен для того чтобы перейти с точки массива massiv[2,0] в точку massiv[1,0]
// // Так как в точке massiv[2,0] справа и сверху есть ячейки с нулями и программа выбирает пойти направо
// // из-за строчки 109 и функции  Fill(row, col + 1) которая идет направо и стоит выше чем   Fill(row-1, col);
// // Чтобы испозовать данную программу на другом массиве для заполнения нужно решить один вопрос
// // Как из точки massiv[3,0] перейти в точку massiv[1,0], если вычитается и складывается только 1
//     x++;
//     if (x == 12) 
//     {
//         Fill(row - 1, col);
//         massiv[2, 1] = 12;
//     }
//     if (massiv[row, col] == 0)
//     {
//         massiv[row, col] = x;
//         Fill(row, col + 1);
//         if (massiv[row, col] != 0)
//         {
//             x--;
//             Fill(row + 1, col);
//         }
//         if (massiv[row, col] != 0)
//         {
//             x--;
//             Fill(row, col - 1);
//         }
//         if (massiv[row, col] != 0)
//         {
//             x--;
//             Fill(row - 1, col);
//         }
//     }
// }

// void PrintMassiv(int[,] print)
// {
//     for (int i = 1; i < print.GetLength(0) - 1; i++)
//     {
//         for (int j = 1; j < print.GetLength(1) - 1; j++)
//         {
//            if(print[i, j]<10){
//             Console.Write($"{0}{print[i, j]} ");
//             }
//             if(print[i, j]>=10){
//             Console.Write($"{print[i, j]} ");
//             }
//         }
//         Console.WriteLine();
//     }
//     Console.WriteLine();
// }
// Fill(1, 1);
// PrintMassiv(massiv);


